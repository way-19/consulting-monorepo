const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// .env dosyasƒ±ndan production Supabase bilgilerini oku
const envContent = fs.readFileSync('.env', 'utf8');
const envLines = envContent.split('\n');
const envVars = {};

envLines.forEach(line => {
  const [key, value] = line.split('=');
  if (key && value) {
    envVars[key.trim()] = value.trim();
  }
});

const supabaseUrl = envVars.VITE_SUPABASE_URL;
const supabaseKey = envVars.VITE_SUPABASE_ANON_KEY;

console.log('üîç Canlƒ± Supabase Deƒüi≈üiklik Kontrol√º');
console.log('URL:', supabaseUrl);
console.log('Timestamp:', new Date().toLocaleString());
console.log('=' .repeat(50));

const supabase = createClient(supabaseUrl, supabaseKey);

async function testLiveChanges() {
  try {
    // 1. Baƒülantƒ± ve User Profiles testi
    console.log('\n1Ô∏è‚É£ User Profiles Kontrol√º...');
    const { data: profiles, error: profilesError } = await supabase
      .from('user_profiles')
      .select('id, email, role, full_name, created_at')
      .order('created_at', { ascending: false });

    if (profilesError) {
      console.error('‚ùå Profiles hatasƒ±:', profilesError.message);
    } else {
      console.log(`‚úÖ ${profiles?.length || 0} profil bulundu:`);
      profiles?.forEach(profile => {
        const createdDate = new Date(profile.created_at).toLocaleDateString();
        console.log(`  - ${profile.email} (${profile.role}) - ${profile.full_name || 'ƒ∞sim yok'} [${createdDate}]`);
      });
    }

    // 2. Mevcut tablolarƒ± listele
    console.log('\n2Ô∏è‚É£ Mevcut Tablolar Kontrol√º...');
    const tables = ['user_profiles', 'clients', 'projects', 'tasks', 'notifications'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true });
        
        if (error) {
          console.log(`  ‚ùå ${table}: ${error.message}`);
        } else {
          console.log(`  ‚úÖ ${table}: ${data?.length || 0} kayƒ±t`);
        }
      } catch (err) {
        console.log(`  ‚ö†Ô∏è ${table}: Eri≈üim hatasƒ±`);
      }
    }

    // 3. Authentication test
    console.log('\n3Ô∏è‚É£ Authentication Test...');
    try {
      const { data: authTest, error: authError } = await supabase.auth.signInWithPassword({
        email: 'test@example.com',
        password: 'wrongpassword'
      });
      
      if (authError) {
        console.log('‚úÖ Auth endpoint √ßalƒ±≈üƒ±yor (beklenen hata):', authError.message);
      }
    } catch (err) {
      console.log('‚úÖ Auth sistem aktif');
    }

    // 4. Real-time test
    console.log('\n4Ô∏è‚É£ Real-time Baƒülantƒ±...');
    let realtimeConnected = false;
    
    const channel = supabase
      .channel('live-test')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'user_profiles' },
        (payload) => {
          console.log('üîÑ Real-time deƒüi≈üiklik:', payload.eventType);
        }
      )
      .subscribe((status) => {
        if (status === 'SUBSCRIBED') {
          console.log('‚úÖ Real-time subscription aktif');
          realtimeConnected = true;
        } else if (status === 'CHANNEL_ERROR') {
          console.log('‚ùå Real-time baƒülantƒ± hatasƒ±');
        } else {
          console.log('‚ÑπÔ∏è Real-time durumu:', status);
        }
      });

    // 5. Son deƒüi≈üiklik zamanƒ±
    console.log('\n5Ô∏è‚É£ Son Aktivite Kontrol√º...');
    const { data: lastActivity, error: activityError } = await supabase
      .from('user_profiles')
      .select('updated_at')
      .order('updated_at', { ascending: false })
      .limit(1);

    if (!activityError && lastActivity?.length > 0) {
      const lastUpdate = new Date(lastActivity[0].updated_at);
      const timeDiff = Date.now() - lastUpdate.getTime();
      const minutesAgo = Math.floor(timeDiff / (1000 * 60));
      
      console.log(`‚úÖ Son g√ºncelleme: ${lastUpdate.toLocaleString()} (${minutesAgo} dakika √∂nce)`);
    }

    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ Canlƒ± kontrol tamamlandƒ±!');
    console.log('üïê Test zamanƒ±:', new Date().toLocaleString());

    // Clean up
    setTimeout(() => {
      supabase.removeAllChannels();
      process.exit(0);
    }, 1000);

  } catch (error) {
    console.error('‚ùå Beklenmeyen hata:', error.message);
    process.exit(1);
  }
}

testLiveChanges();