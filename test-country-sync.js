// Bu script'i browser console'da √ßalƒ±≈ütƒ±rƒ±n
// Hem admin panel hem de marketing app'te test edin

console.log('üîç Testing Country Synchronization\n');
console.log('üìç Current URL:', window.location.href);
console.log('üìç Current Port:', window.location.port);

// Check localStorage
const stored = localStorage.getItem('country_configurations');
if (stored) {
  try {
    const configs = JSON.parse(stored);
    console.log('\nüíæ LocalStorage Configurations:');
    
    const allCountries = Object.values(configs);
    const activeCountries = allCountries.filter(config => config.active);
    
    console.log(`üìä Total countries: ${allCountries.length}`);
    console.log(`‚úÖ Active countries: ${activeCountries.length}`);
    console.log(`‚ùå Inactive countries: ${allCountries.length - activeCountries.length}`);
    
    console.log('\nüìã Country Details:');
    allCountries.forEach(config => {
      const status = config.active ? 'üü¢ ACTIVE' : 'üî¥ INACTIVE';
      console.log(`  ${config.countryCode}: ${config.countryName} - ${status}`);
    });
    
    // Test CountryConfigService if available
    if (typeof CountryConfigService !== 'undefined') {
      console.log('\nüîß Testing CountryConfigService...');
      const service = CountryConfigService.getInstance();
      
      // Force reload from localStorage
      service.reloadFromStorage();
      
      const availableCountries = service.getAvailableCountries();
      console.log(`üåç Available countries from service: ${availableCountries.length}`);
      
      availableCountries.forEach(config => {
        console.log(`  ${config.countryCode}: ${config.countryName}`);
      });
      
      // Check if there's a mismatch
      if (availableCountries.length !== activeCountries.length) {
        console.warn('‚ö†Ô∏è MISMATCH DETECTED!');
        console.warn(`LocalStorage active: ${activeCountries.length}, Service available: ${availableCountries.length}`);
      } else {
        console.log('‚úÖ LocalStorage and Service are in sync!');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error parsing localStorage:', error);
  }
} else {
  console.log('üíæ No configurations found in localStorage');
}

// Test function to toggle a country (for testing)
window.testToggleCountry = function(countryCode) {
  console.log(`üîß Testing toggle for ${countryCode}...`);
  
  const stored = localStorage.getItem('country_configurations');
  if (stored) {
    const configs = JSON.parse(stored);
    if (configs[countryCode]) {
      configs[countryCode].active = !configs[countryCode].active;
      localStorage.setItem('country_configurations', JSON.stringify(configs));
      
      // Trigger storage event manually for same-tab testing
      window.dispatchEvent(new StorageEvent('storage', {
        key: 'country_configurations',
        newValue: JSON.stringify(configs),
        oldValue: stored
      }));
      
      console.log(`‚úÖ ${countryCode} toggled to: ${configs[countryCode].active ? 'ACTIVE' : 'INACTIVE'}`);
      console.log('üîÑ Storage event dispatched');
    } else {
      console.error(`‚ùå Country ${countryCode} not found`);
    }
  }
};

console.log('\nüß™ Test Commands Available:');
console.log('testToggleCountry("GE") - Toggle Georgia');
console.log('testToggleCountry("CR") - Toggle Costa Rica');
console.log('testToggleCountry("AE") - Toggle UAE');